#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <regex.h>
#include <unistd.h>
#include <getopt.h>
#include <ctype.h>
#include "reversi.h"

size_t board_size;
bool verbose;
int game_mode;

static void usage(int status) {
	if (status == EXIT_SUCCESS){
		printf("Usage: reversi [OPTION] FILE\n");
		printf("Play a reversi game interactively with humans and AIs\n");
		printf("\n\t -s, --size SIZE\t board size (min=1, max=4 (default))\n");
		printf("\t -c, --contest\t enable 'contest mode'\n");
		printf("\t -b, --black-ai\t set black player as an AI\n");
		printf("\t -w, --white-ai\t set white player as an AI\n");
		printf("\t -v, --verbose\t verbose output\n");
		printf("\t -V, --version\t display version and exit\n");
		printf("\t -h, --help\t display this help\n");
	} else {
		fprintf(stderr, "Try 'reversi --help' for more information\n");
	}
}

static void version() {
	printf("reversi %d.%d.%d\n", PROG_VERSION, PROG_SUBVERSION, PROG_REVISION);
	printf("This software allows to play to reversi game\n");
}

char* trim_white_spaces(char* input) {
    int i,j;
    char *output = input;
    for (i = 0, j = 0; i < strlen(input); i++,j++) {
        if (input[i]!=' '){
			output[j]=input[i];                     
		} else {
			j--;
		}
    }
    output[j]=0;
    return output;
}

static state_t board_init(size_t width) {
	char ** board;
	int i, j, first_empty;
	state_t state;
	
	board = malloc(sizeof(char*)*width);
	if (board == NULL) {
		return state;
	}
	for (i = 0; i < width; i++) {
		board[i] = malloc(sizeof(char)*width);
		if (board == NULL) {
			return state;
		}
		for(j = 0; j < width; j++) {
			board[i][j] = EMPTY_STONE;
		}
	}
	first_empty = width/2 - 1;
	board[first_empty][first_empty] = WHITE_STONE;
	board[first_empty+1][first_empty+1] = WHITE_STONE;
	
	board[first_empty][first_empty+1] = BLACK_STONE;
	board[first_empty+1][first_empty] = BLACK_STONE;
	
	state.player = BLACK_STONE;
	state.board = board;
	return state;
}

static void board_delete(char** board) {
	int i;
	
	if (board == NULL) {
		return;
	}
	
	for (i = 0; i < board_size; i++) {
		free(board[i]);
	}
	free(board);
}

static score_t board_score(char** board) {
	int i, j;
	score_t score;
	
	score.black = 0;
	score.white = 0;
	
	for(i = 0; i < board_size; i++) {
		for(j = 0; j < board_size; j++) {
			switch(board[i][j]) {
				case WHITE_STONE:
					score.white++;
					break;
				case BLACK_STONE:
					score.black++;
					break;
			}
		}
	}
	return score;
}

static void board_print(char** board) {
	int i, j;
	char letter;
	
	printf("\t");
	for (i = 0; i < board_size; i++) {
		printf("%d ", i+1);
	}
	printf("\n");
	for (i = 0; i < board_size; i++) {
		switch(i) {
			case 0:
				letter = 'A';
				break;
			case 1:
				letter = 'B';
				break;
			case 2:
				letter = 'C';
				break;
			case 3:
				letter = 'D';
				break;
			case 4:
				letter = 'E';
				break;
			case 5:
				letter = 'F';
				break;
			case 6:
				letter = 'G';
				break;
			case 7:
				letter = 'H';
				break;
		}
		printf("%c\t", letter);
		for (j = 0; j < board_size; j++) {
			printf("%c ", board[i][j]);
		}
		printf("\n");
	}
}

static void board_save(state_t state) {
	char filename[50];
	int i, j;
	FILE * f;
	
	printf("Give a filename to save the game (default: 'board.txt'): ");
	scanf("%s\n", filename);
	strcpy(filename, trim_white_spaces(filename));
	
	if (!strlen(filename)) {
		strcpy(filename, "board.txt");
	}
	
	f = fopen(filename, "w");
	if (f == NULL) {
		printf("Could not save the board, please try later\n");
		return;
	}
	fprintf(f, "%c\n", state.player);
	for(i = 0; i < board_size; i++) {
		for (j = 0; j < board_size; j++) {
			fprintf(f, "%c ", state.board[i][j]);
		}
		fprintf(f, "\n");
	}
	fclose(f);
}

static state_t board_load(char * filename) {
	char unknown_char_regexp[] = "^[_OX \t]|O{2,}|X{2,}";
	int res, num_char, num_line = 0, rows = 0, i;
	char line[200], aux[200], read_char, **board;
	size_t width = -1;
	state_t state;
	row_t row;
	FILE * f;
	
	state.player = 0;
	
	f = fopen(filename, "r");
	
	if (f == NULL) {
		printf("File not found\n");
		return state;
	}
	
	//CHECKING FIRST LINE TO BE A PLAYER'S TURN
	do {
		num_line++;
		fgets(line, 200, f);
		
		res = is_there_comment(line);
		if (res != -1) {
			strncpy(aux, line, res);
			strcpy(line, aux);
		}
		if ((num_char = is_first_line_correct(line)) >= 0 && num_char < strlen(line)) {
			printf("reversi: error: wrong character '%c' at line %d\n", line[num_char], num_line);
			return state;
		}
		state.player = read_current_player(line);
	} while(!state.player);
	
	//NORMAL BOARD
	do {
		num_line++;
		fgets(line, 200, f);
		
		res = is_there_comment(line);
		if (res != -1) {
			if (res == 0)
				continue;
			strncpy(aux, line, res);
			strcpy(line, aux);
		}
		if ((num_char = is_line_correct(line)) >= 0 && num_char < strlen(line)) {
			printf("reversi: error: wrong character '%c' at line %d\n", line[num_char], num_line);
			return state;
		}
		row = read_row(line, num_line);
		if (row.width <= 0)
			continue;
		if (width == -1) {
			width = row.width;
			board = malloc(sizeof(char*)*width);
		} else if (width != row.width) {
			if (board) {
				for (i = 0; i < rows; i++) {
					free(board[i]);
				}
				if (width > row.width) {
					printf("reversi: error board is too short at line %d\n", num_line);
				} else if (width < row.width) {
					printf("reversi: error board is too long at line %d\n", num_line);
				}
				free(board);
			}
			exit(EXIT_FAILURE);
		}
		board[rows] = malloc(sizeof(char)*width);
		for (i = 0; i < width; i++) {
			board[rows][i] = row.row[i];
		}
		rows++;
	} while(rows != width);
	if (rows > width) {
		printf("reversi: error: board has too few rows\n");
		exit(EXIT_FAILURE);
	} else if (rows < width) {
		printf("reversi: error: board has too many rows\n");
		exit(EXIT_FAILURE);
	}
	state.board = board;
	board_size = width;
	return state;
}

row_t read_row(char * line, int num_line) {
	row_t row;
	int i, j;
	row.width = -1;
	row.row = malloc(sizeof(char)*8);
	i = 0, j = 0;
	while(line[i] != '\n' && line[i] != 0) {
		if (line[i] != ' ') {
			if (i >= 8) {
				printf("reversi: error: board width is too long at line %d\n", num_line);
				exit(EXIT_FAILURE);
			}
			row.row[j] = line[i];
			j++;
		}
		i++;
	}
	row.width = j;
	return row;
}

char read_current_player(char * line) {
	char read_column_regexp[] = "[OX]";
	regex_t reg;
	regmatch_t matches[1];
	int res;
	res = regcomp(&reg, read_column_regexp, REG_EXTENDED);
	if (res) {
		printf("Error defining regexp\n");
		return -1;
	}
	res = regexec(&reg, line, 1, matches, 0);
	if (!res) {
		return line[(int)matches[0].rm_so];
	}
	return 0;
}

int is_there_comment(char * line) {
	char comment_regexp[] = "#";
	regex_t reg;
	regmatch_t matches[1];
	int res;
	res = regcomp(&reg, comment_regexp, REG_EXTENDED);
	if (res) {
		printf("Error defining regexp\n");
		return -1;
	}
	res = regexec(&reg, line, 1, matches, REG_NOTBOL);
	if (!res) {
		return (int)matches[0].rm_so;
	}
	return -1;
}



int is_line_correct(char * line) {
	char correct_line_regexp[] = "^[OX_ ]|O{2,}|X{2,}|_{2,}";
	regex_t reg;
	regmatch_t matches[1];
	int res;
	res = regcomp(&reg, correct_line_regexp, REG_EXTENDED);
	if (res) {
		printf("Error defining regexp\n");
		return -1;
	}
	res = regexec(&reg, line, 1, matches, REG_NOTBOL);
	if (!res) {
		return (int)matches[0].rm_so;
	}
	return -1;
}

int is_first_line_correct(char * line) {
	int i;
	i = 0;
	while(line[i] != '\n') {
		if (line[i] != ' ' && line[i] != BLACK_STONE && line[i] != WHITE_STONE && line[i] != EMPTY_STONE) {
			return i;
		}
		i++;
	}
	/*row.row = cur_row;
	row.width = j;*/
	return -1;
}

int is_move_valid(state_t state, move_t move) {
	char player = state.player;
	int y = move.column, x = move.row;
	
	if (x >= board_size || y >= board_size || x < 0 || y < 0) {
		return 0;
	}
	
	if (state.board[y][x] != EMPTY_STONE) {
		return 0;
	}
	
	if (is_up_valid(state, x, y, player)) {
		return 1;
	} else if (is_down_valid(state, x, y, player)) {
		return 1;
	} else if (is_left_valid(state, x, y, player)) {
		return 1;
	} else if (is_right_valid(state, x, y, player)) {
		return 1;
	} else if (is_up_left_valid(state, x, y, player)) {
		return 1;
	} else if (is_up_right_valid(state, x, y, player)) {
		return 1;
	} else if (is_down_left_valid(state, x, y, player)) {
		return 1;
	} else if (is_down_right_valid(state, x, y, player)) {
		return 1;
	} else {
		return 0;
	}
}

int is_up_valid(state_t state,int x,int y,char player) {
	if (y == 0) {
		return 0;
	}
	if (state.board[y-1][x] != player && state.board[y-1][x] != EMPTY_STONE) {
		return up_valid(state, x, y-1, player);
	} else {
		return 0;
	}
}

int up_valid(state_t state,int x,int y,char player) {
	if (y == 0) {
		if (state.board[y][x] == player) {
			return 1;
		} else {
			return 0;
		}
	}
	if (state.board[y-1][x] == EMPTY_STONE) {
		return 0;
	}
	if (state.board[y-1][x] != player) {
		return up_valid(state, x, y-1, player);
	}
	if (state.board[y-1][x] == player) {
		return 1;
	}
}

int is_down_valid(state_t state,int x,int y,char player) {
	if (y == board_size - 1) {
		return 0;
	}
	if (state.board[y+1][x] != player && state.board[y+1][x] != EMPTY_STONE) {
		return down_valid(state, x, y+1, player);
	} else {
		return 0;
	}
}

int down_valid(state_t state,int x,int y,char player) {
	if (y == board_size - 1) {
		if (state.board[y][x] == player) {
			return 1;
		} else {
			return 0;
		}
	}
	if (state.board[y+1][x] == EMPTY_STONE) {
		return 0;
	}
	if (state.board[y+1][x] != player) {
		return down_valid(state, x, y+1, player);
	}
	if (state.board[y+1][x] == player) {
		return 1;
	}
}

int is_right_valid(state_t state,int x,int y,char player) {
	if (x == board_size - 1) {
		return 0;
	}
	if (state.board[y][x+1] != player && state.board[y][x+1] != EMPTY_STONE) {
		return right_valid(state, x+1, y, player);
	} else {
		return 0;
	}
}

int right_valid(state_t state,int x,int y,char player) {
	if (x == board_size - 1) {
		if (state.board[y][x] == player) {
			return 1;
		} else {
			return 0;
		}
	}
	if (state.board[y][x+1] == EMPTY_STONE) {
		return 0;
	}
	if (state.board[y][x+1] != player) {
		return right_valid(state, x+1, y, player);
	}
	if (state.board[y][x+1] == player) {
		return 1;
	}
}

int is_left_valid(state_t state,int x,int y,char player) {
	if (x == 0) {
		return 0;
	}
	if (state.board[y][x-1] != player && state.board[y][x-1] != EMPTY_STONE) {
		return left_valid(state, x-1, y, player);
	} else {
		return 0;
	}
}

int left_valid(state_t state,int x,int y,char player) {
	if (x == 0) {
		if (state.board[y][x] == player) {
			return 1;
		} else {
			return 0;
		}
	}
	if (state.board[y][x-1] == EMPTY_STONE) {
		return 0;
	}
	if (state.board[y][x-1] != player) {
		return left_valid(state, x-1, y, player);
	}
	if (state.board[y][x-1] == player) {
		return 1;
	}
}

int is_up_left_valid(state_t state,int x,int y,char player) {
	if (x == 0 || y == 0) {
		return 0;
	}
	if (state.board[y-1][x-1] != player && state.board[y-1][x-1] != EMPTY_STONE) {
		return up_left_valid(state, x-1, y-1, player);
	} else {
		return 0;
	}
}

int up_left_valid(state_t state,int x,int y,char player) {
	if (x == 0 || y == 0) {
		if (state.board[y][x] == player) {
			return 1;
		} else {
			return 0;
		}
	}
	if (state.board[y-1][x-1] == EMPTY_STONE) {
		return 0;
	}
	if (state.board[y-1][x-1] != player) {
		return up_left_valid(state, x-1, y-1, player);
	}
	if (state.board[y-1][x-1] == player) {
		return 1;
	}
}

int is_up_right_valid(state_t state,int x,int y,char player) {
	if (x == board_size - 1 || y == 0) {
		return 0;
	}
	if (state.board[y-1][x+1] != player && state.board[y-1][x+1] != EMPTY_STONE) {
		return up_right_valid(state, x+1, y-1, player);
	} else {
		return 0;
	}
}

int up_right_valid(state_t state,int x,int y,char player) {
	if (x == board_size - 1 || y == 0) {
		if (state.board[y][x] == player) {
			return 1;
		} else {
			return 0;
		}
	}
	if (state.board[y-1][x+1] == EMPTY_STONE) {
		return 0;
	}
	if (state.board[y-1][x+1] != player) {
		return up_right_valid(state, x+1, y-1, player);
	}
	
	if (state.board[y-1][x+1] == player) {
		return 1;
	}
}

int is_down_left_valid(state_t state,int x,int y,char player) {
	if (x == 0 || y == board_size - 1) {
		return 0;
	}
	if (state.board[y+1][x-1] != player && state.board[y+1][x-1] != EMPTY_STONE) {
		return down_left_valid(state, x-1, y+1, player);
	} else {
		return 0;
	}
}

int down_left_valid(state_t state,int x,int y,char player) {
	if (x == 0 || y == board_size - 1) {
		if (state.board[y][x] == player) {
			return 1;
		} else {
			return 0;
		}
	}
	if (state.board[y+1][x-1] == EMPTY_STONE) {
		return 0;
	}
	if (state.board[y+1][x-1] != player) {
		return down_left_valid(state, x-1, y+1, player);
	}
	if (state.board[y+1][x-1] == player) {
		return 1;
	}
}

int is_down_right_valid(state_t state,int x,int y,char player) {
	if (x == board_size - 1 || y == board_size - 1) {
		return 0;
	}
	if (state.board[y+1][x+1] != player && state.board[y+1][x+1] != EMPTY_STONE) {
		return down_right_valid(state, x+1, y+1, player);
	} else {
		return 0;
	}
}

int down_right_valid(state_t state,int x,int y,char player) {
	if (x == board_size - 1 || y == board_size - 1) {
		if (state.board[y][x] == player) {
			return 1;
		} else {
			return 0;
		}
	}
	if (state.board[y+1][x+1] == EMPTY_STONE) {
		return 0;
	}
	if (state.board[y+1][x+1] != player) {
		return down_right_valid(state, x+1, y+1, player);
	}
	if (state.board[y+1][x+1] == player) {
		return 1;
	}
}

int count_valid_moves(state_t state) {
	int valid_moves = 0;
	int i,j;
	move_t move;
	
	for (i = 0; i < board_size; i++) {
		for (j = 0; j < board_size; j++) {
			move.row = j;
			move.column = i;
			if (is_move_valid(state, move))
				valid_moves++;
		}
	}
	return valid_moves;
}

int board_play(state_t state, move_t move) {
	if (!is_move_valid(state, move)) {
		return 0;
	} 
	if (is_up_valid(state, move.row, move.column, state.player)) {
		move_up(state, move);
	}
	if (is_down_valid(state, move.row, move.column, state.player)) {
		move_down(state, move);
	}
	if (is_right_valid(state, move.row, move.column, state.player)) {
		move_right(state, move);
	}
	if (is_left_valid(state, move.row, move.column, state.player)) {
		move_left(state, move);
	}
	if (is_up_right_valid(state, move.row, move.column, state.player)) {
		move_up_right(state, move);
	}
	if (is_up_left_valid(state, move.row, move.column, state.player)) {
		move_up_left(state, move);
	}
	if (is_down_right_valid(state, move.row, move.column, state.player)) {
		move_down_right(state, move);
	}
	if (is_down_left_valid(state, move.row, move.column, state.player)) {
		move_down_left(state, move);
	}
	return 1;
}

void move_up(state_t state,move_t move) {
	int x = move.row, y = move.column;
	
	if (state.board[y][x] != EMPTY_STONE)
		state.board[y][x] = EMPTY_STONE;
	
	while (y >= 0 && state.board[y][x] != state.player) {
		state.board[y][x] = state.player;
		y--;
	}
}
void move_down(state_t state,move_t move) {
	int x = move.row, y = move.column;
	
	if (state.board[y][x] != EMPTY_STONE)
		state.board[y][x] = EMPTY_STONE;
	
	while (y < board_size && state.board[y][x] != state.player) {
		state.board[y][x] = state.player;
		y++;
	}
}
void move_right(state_t state,move_t move) {
	int x = move.row, y = move.column;
	
	if (state.board[y][x] != EMPTY_STONE)
		state.board[y][x] = EMPTY_STONE;
	
	while (x < board_size && state.board[y][x] != state.player) {
		state.board[y][x] = state.player;
		x++;
	}
}
void move_left(state_t state,move_t move) {
	int x = move.row, y = move.column;
	
	if (state.board[y][x] != EMPTY_STONE)
		state.board[y][x] = EMPTY_STONE;
	
	while (x >= 0 && state.board[y][x] != state.player) {
		state.board[y][x] = state.player;
		x--;
	}
}
void move_up_right(state_t state, move_t move) {
	int x = move.row, y = move.column;
	
	if (state.board[y][x] != EMPTY_STONE)
		state.board[y][x] = EMPTY_STONE;
	
	while ((x < board_size && y >= 0) && state.board[y][x] != state.player) {
		state.board[y][x] = state.player;
		x++;
		y--;
	}
}
void move_up_left(state_t state, move_t move) {
	int x = move.row, y = move.column;
	
	if (state.board[y][x] != EMPTY_STONE)
		state.board[y][x] = EMPTY_STONE;
	
	while ((x >= 0 && y >= 0) && state.board[y][x] != state.player) {
		state.board[y][x] = state.player;
		x--;
		y--;
	}
}
void move_down_left(state_t state, move_t move) {
	int x = move.row, y = move.column;
	
	if (state.board[y][x] != EMPTY_STONE)
		state.board[y][x] = EMPTY_STONE;
	
	while (x >= 0 && y < board_size && state.board[y][x] != state.player) {
		state.board[y][x] = state.player;
		x--;
		y++;
	}
}
void move_down_right(state_t state, move_t move) {
	int x = move.row, y = move.column;
	
	if (state.board[y][x] != EMPTY_STONE)
		state.board[y][x] = EMPTY_STONE;
	
	while ((x < board_size && y < board_size) && state.board[y][x] != state.player) {
		state.board[y][x] = state.player;
		x++;
		y++;
	}
}

static int is_game_over(char ** board) {
	int i, j, count = 0;
	for (i = 0; i < board_size; i++) {
		for (j = 0; j < board_size; j++) {
			if (board[i][j] != EMPTY_STONE)
				count++;
		}
	}
	if (count == board_size*board_size)
		return 1;
	else 
		return 0;
}

static move_t human_player(state_t state) {
	char string[200];
	move_t move;
	board_print(state.board);
	score_t score = board_score(state.board);
	printf("Score:\n'O': %d, 'X': %d\n", score.white, score.black);
	
	printf("'%c' player's turn.\n Give your move (e.g. 'A5' or 'a5'), press 'q' or 'Q' to quit: ", state.player);
	memset(string,0,sizeof(string));
	fgets(string, 199, stdin);
	if (strstr(string, "q") || strstr(string, "Q")) {
		board_save(state);
		exit(EXIT_SUCCESS);
	}
	move = read_move(string);
	while(!board_play(state, move)) {
		printf("Move not valid. Try again: ");
		scanf("%s", string);
		move = read_move(string);
	}
	return move;
}

void game(char * line) {
	char string[200];
	char temporary_player;
	move_t move;
	state_t state;
	if(line) {
		state = board_load(line);
	} else {
		board_size = 8;
		state = board_init(board_size);
	}
	
	printf("Welcome to this reversi game!\n");
	printf("Black player(X) is human and white player (O) is human.\n");
	printf("Black player start\n");
	
	while(1) {
		if (count_valid_moves(state)== 0) {
			temporary_player = state.player;
			if (state.player == WHITE_STONE) {
				state.player = BLACK_STONE;
			} else {
				state.player = WHITE_STONE;
			}
			if (count_valid_moves(state)== 0) {
				printf("Game over\n");
				if (score.white > score.black) {
					printf("Player 'O' win the game\n");
				} else if (score.white > score.black) {
					printf("Player 'X' win the game\n");
				} else {
					printf("Draw game, no winner\n");
				}
				board_print(state.board);
				printf("Score:\n'O': %d, 'X': %d\n", score.white, score.black);
				printf("Thanks for playing, see you soon!\n");
				board_delete(state.board);
				return;
			}
			printf("'%c' Does not have moves, turn changes\n", temporary_player);
		}
		
		move = human_player(state);
		
		if (state.player == WHITE_STONE) {
			state.player = BLACK_STONE;
		} else {
			state.player = WHITE_STONE;
		}
	}	
}

move_t read_move(char * string) {
	move_t move;
	char * letter;
	int y = 0, x;
	letter = string;
	while(*letter == ' ')
		letter++;
	
	switch(tolower(letter[0])) {
		case 'h':
			y++;
		case 'g':
			y++;
		case 'f':
			y++;
		case 'e':
			y++;
		case 'd':
			y++;
		case 'c':
			y++;
		case 'b':
			y++;
		case 'a':
			letter++;
			break;
		default:
			move.column = -1;
			move.row = -1;
			return move;
			
	}
	
	while(*letter == ' ')
		letter++;
	
	if (isdigit(*letter)) {
		x = atoi(letter);
		if (x > 8) {
			move.column = -1;
			move.row = -1;
			return move;
		}
	} else {
		move.column = -1;
		move.row = -1;
		return move;
	}
	
	move.column = y;
	move.row = x-1;
	return move;
}



int main(int argc, char *argv[]) {
	int optc;
	bool other_prev_options = false, end = false;
	char *filename;
	struct option long_opts[] = {
		{"size", required_argument, NULL, 's'},
		{"black-ai", no_argument, NULL, 'b'},
		{"white-ai", no_argument, NULL, 'w'},
		{"all-ai", no_argument, NULL, 'a'},
		{"verbose", no_argument, NULL, 'v'},
		{"Version", no_argument, NULL, 'V'},
		{"h", no_argument, NULL, 'h'},
		{NULL, no_argument, NULL, 0}
	};
	board_size = 8;
	verbose = false;
	game_mode = 0;
	while(((optc = getopt_long (argc, argv, "sbwvVh:", long_opts, NULL)) != 1) && !end) {
		switch(optc) {
			case 's':
				other_prev_options = 1;
				board_size = atoi(optarg);
				break;
			case 'V':
				other_prev_options = 1;
				version();
				break;
			case 'v':
				other_prev_options = 1;
				verbose = true;
				break;
			case 'b':
				other_prev_options = 1;
				game_mode = 1;
				break;
			case 'w':
				other_prev_options = 1;
				game_mode = 2;
				break;
			case 'a':
				other_prev_options = 1;
				game_mode = 3;
				break;
			default:
				if (!other_prev_options) {
					usage(EXIT_FAILURE);
				}
				if (argv[optind]) {
					filename = malloc(sizeof(char)*(strlen(argv[optind]) + 1));
					strcpy(filename, argv[optind]);
				}
				end = true;
				break;
		}
	}
	game(filename);
	return 0;
}